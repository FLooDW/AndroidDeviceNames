/*
 * Copyright (C) 2015 tslamic
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package tslamic.github.io.adn;

// Generated on $datetime with adn.py version $version
// Number of supported devices: $count
public final class DeviceNames {

    /**
     * Returns a user-friendly name of current device. Same as calling {@code
     * getDeviceName(android.os.Build.MODEL, null)}.
     *
     * @return {@code String} name of this device or {@code null} if device model
     * is not listed.
     */
    public static String getCurrentDeviceName() {
        return getDeviceName(android.os.Build.MODEL, null);
    }

    /**
     * Returns a user-friendly name of current device. Same as calling {@code
     * getDeviceName(android.os.Build.MODEL, fallback)}.
     *
     * @param fallback fallback name if the device model is not listed.
     * @return {@code String} name of this device or fallback if device model
     * is not listed.
     */
    public static String getCurrentDeviceName(String fallback) {
        return getDeviceName(android.os.Build.MODEL, fallback);
    }

    /**
     * Returns a user-friendly name of the specified device model.
     *
     * @param model    the device model, e.g. {@code android.os.Build.MODEL}.
     * @param fallback fallback name if the device model is not listed.
     * @return {@code String} name of this device or fallback if device model
     * is not listed.
     */
    public static String getDeviceName(String model, String fallback) {
        if (android.text.TextUtils.isEmpty(model)) {
            return fallback;
        }
        String deviceName;
        final char c = Character.toUpperCase(model.charAt(0));
        switch (c) {
$devices
        }
        if (deviceName.isEmpty()) deviceName = fallback;
        return deviceName;
    }

$device_methods

    private DeviceNames() {
    }

}
